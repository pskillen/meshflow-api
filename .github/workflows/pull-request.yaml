name: Pull Request

on:
  pull_request:
    branches: [ main ]

jobs:
  verify:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.13"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r Meshflow/requirements.txt
          pip install pytest pytest-django pytest-cov black isort flake8 flake8-quotes

      - name: Run linting
        run: |
          black . --check
          isort . --check-only
          flake8 .
        working-directory: Meshflow/

      - name: Run tests with coverage
        run: pytest --cov=. --cov-report=xml
        working-directory: Meshflow/

  build:
    needs: verify
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: false
          load: true
          tags: ghcr.io/${{ github.repository }}:pr-${{ github.event.pull_request.number }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            VERSION=pr-${{ github.event.pull_request.number }}

      - name: Build migrations Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: false
          load: true
          tags: ghcr.io/${{ github.repository }}:pr-${{ github.event.pull_request.number }}-migrations
          file: Dockerfile-migrations
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            VERSION=pr-${{ github.event.pull_request.number }}

      - name: Run smoke test
        env:
          GITHUB_REPOSITORY: ${{ github.repository }}
          GITHUB_EVENT_PULL_REQUEST_NUMBER: ${{ github.event.pull_request.number }}
        run: |
          HEALTH_CHECK_URL="http://localhost:8000/api/status/"
          MAX_RETRIES=5
          RETRY_COUNT=0

          # Start the DB and test containers
          docker compose -f docker-compose.ci-pr.yaml up -d

          while [ $RETRY_COUNT -lt $MAX_RETRIES ]; do
            if curl -s -f -o /dev/null "$HEALTH_CHECK_URL"; then
              echo "Health check passed!"
              exit 0
            fi

            echo "Health check failed, retrying in 5 seconds..."
            sleep 5
            RETRY_COUNT=$((RETRY_COUNT + 1))
          done

          echo "Health check failed after $MAX_RETRIES attempts"
          docker compose -f docker-compose.ci-pr.yaml logs api
          exit 1

      - name: Cleanup
        if: always()
        run: |
          docker compose -f docker-compose.ci-pr.yaml down -v
          docker system prune -f 