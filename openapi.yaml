openapi: 3.0.0
info:
  title: Meshflow API
  version: 1.0.0
  description: API for managing Meshtastic networks and nodes

servers:
  - url: /api
    description: API base URL

tags:
  - name: Authentication
    description: JWT token management endpoints
  - name: Packets
    description: Packet ingestion and node information endpoints
  - name: Constellations
    description: Constellation management endpoints
  - name: Nodes
    description: Node and API key management endpoints

components:
  securitySchemes:
    BearerAuth:
      description: >
        A JWT token used by a user to authenticate with the API. The token is issued by the /token endpoint.
      type: http
      scheme: bearer
      bearerFormat: JWT
    NodeApiKeyAuth:
      description: >
        An API key used by a node (or a node's bot process) to authenticate with the API. These are always
        scoped to one constellation and one user, but may be used by multiple nodes .
      type: apiKey
      in: header
      name: X-API-Key

  schemas:
    Error:
      type: object
      properties:
        status:
          type: string
          enum: [error]
        message:
          type: string

    Success:
      type: object
      properties:
        status:
          type: string
          enum: [success]
        message:
          type: string

    BaseIncomingPacket:
      type: object
      description: >
        A packet received from the mesh network. This is the base class for all packet types, and contains
        common fields that are present in all packets.
      properties:
        id:
          type: integer
          description: The packet ID as generated by the packet sender
        from:
          type: integer
          description: The ID of the node that sent the packet
        fromId:
          type: string
          description: The ID of the node that sent the packet, in Meshastic !hex format
        to:
          type: integer
          description: The ID of the node that was the intended recipient of the packet
          nullable: true
        toId:
          type: string
          nullable: true
          description: The ID of the node that was the intended recipient of the packet, in Meshastic !hex format
        channel:
          type: integer
          nullable: true
          description: The channel number on which the packet was received
        rxTime:
          type: integer
          description: The time the packet was received, as a Unix timestamp
        rxSnr:
          type: number
          nullable: true
          description: The signal-to-noise ratio of the packet
        hopLimit:
          type: integer
          nullable: true
          description: The number of hops the packet had remaining when it was received
        rxRssi:
          type: number
          nullable: true
          description: The received signal strength of the packet
        hopStart:
          type: integer
          nullable: true
          description: The initial number of hops the packet had when it was sent 
        relayNode:
          type: integer
          nullable: true
          description: The ID of the node that relayed the packet
        pkiEncrypted:
          type: boolean
          nullable: true
          description: Whether the packet was encrypted using the node's public key
        nextHop:
          type: integer
          nullable: true
          description: The ID of the next hop node
        priority:
          type: string
          nullable: true
          description: The priority of the packet
        raw:
          type: string
          nullable: true
          description: The raw packet data

    TextMessagePacket:
      allOf:
        - $ref: '#/components/schemas/BaseIncomingPacket'
        - type: object
          properties:
            decoded:
              type: object
              properties:
                portnum:
                  type: string
                  enum: [TEXT_MESSAGE_APP]
                payload:
                  type: string
                bitfield:
                  type: integer
                  nullable: true
                text:
                  type: string
                  nullable: true
                  description: The text of the message
                replyId:
                  type: integer
                  nullable: true
                  description: The ID of the message being replied to
                emoji:
                  type: integer
                  nullable: true
                  description: If '1', the message is an emoji reply

    NodeInfoPacket:
      allOf:
        - $ref: '#/components/schemas/BaseIncomingPacket'
        - type: object
          properties:
            decoded:
              type: object
              properties:
                portnum:
                  type: string
                  enum: [NODEINFO_APP]
                payload:
                  type: string
                bitfield:
                  type: integer
                  nullable: true
                user:
                  type: object
                  properties:
                    id:
                      type: string
                      description: The ID of the node in Meshastic !hex format
                    shortName:
                      type: string
                      nullable: true  
                      description: The short name of the node
                    longName:
                      type: string
                      nullable: true
                      description: The long name of the node
                    hwModel:
                      type: string
                      nullable: true
                      description: The hardware model of the node
                    swVersion:
                      type: string
                      nullable: true
                      description: The software version of the node
                    publicKey:
                      type: string
                      nullable: true
                      description: The public key of the node
                    macaddr:
                      type: string
                      nullable: true
                      description: The MAC address of the node
                    role:
                      type: string
                      nullable: true
                      description: The Meshastic role of the node (e.g. CLIENT, ROUTER)
                      enum: [CLIENT, CLIENT_MUTE, CLIENT_HIDDEN, ROUTER, ROUTER_CLIENT, ROUTER_LATE, REPEATER, TRACKER, SENSOR, SIMULATOR]
                    raw:
                      type: string
                      nullable: true

    PositionPacket:
      allOf:
        - $ref: '#/components/schemas/BaseIncomingPacket'
        - type: object
          properties:
            decoded:
              type: object
              properties:
                portnum:
                  type: string
                  enum: [POSITION_APP]
                payload:
                  type: string
                bitfield:
                  type: integer
                  nullable: true
                position:
                  type: object
                  properties:
                    latitude:
                      type: number
                      nullable: true
                    latitudeI:
                      type: integer
                      nullable: true
                    longitude:
                      type: number
                      nullable: true
                    longitudeI:
                      type: integer
                      nullable: true
                    altitude:
                      type: number
                      nullable: true
                    heading:
                      type: number
                      nullable: true
                    locationSource:
                      type: string
                      nullable: true
                      enum: [INTERNAL, EXTERNAL, MANUAL, UNKNOWN]
                    precisionBits:
                      type: integer
                      nullable: true
                    time:
                      type: integer
                      nullable: true
                    groundSpeed:
                      type: number
                      nullable: true
                    groundTrack:
                      type: number
                      nullable: true
                    raw:
                      type: string
                      nullable: true

    DeviceTelemetryPacket:
      allOf:
        - $ref: '#/components/schemas/BaseIncomingPacket'
        - type: object
          properties:
            decoded:
              type: object
              properties:
                portnum:
                  type: string
                  enum: [TELEMETRY_APP]
                payload:
                  type: string
                bitfield:
                  type: integer
                  nullable: true
                telemetry:
                  type: object
                  properties:
                    deviceMetrics:
                      type: object
                      properties:
                        batteryLevel:
                          type: number
                          nullable: true
                        voltage:
                          type: number
                          nullable: true
                        channelUtilization:
                          type: number
                          nullable: true
                        airUtilTx:
                          type: number
                          nullable: true
                        uptimeSeconds:
                          type: integer
                          nullable: true
                    time:
                      type: integer
                    raw:
                      type: string
                      nullable: true

    LocalStatsTelemetryPacket:
      allOf:
        - $ref: '#/components/schemas/BaseIncomingPacket'
        - type: object
          properties:
            decoded:
              type: object
              properties:
                portnum:
                  type: string
                  enum: [TELEMETRY_APP]
                payload:
                  type: string
                bitfield:
                  type: integer
                  nullable: true
                telemetry:
                  type: object
                  properties:
                    localStats:
                      type: object
                      properties:
                        uptimeSeconds:
                          type: integer
                          nullable: true
                        channelUtilization:
                          type: number
                          nullable: true
                        airUtilTx:
                          type: number
                          nullable: true
                        numPacketsTx:
                          type: integer
                          nullable: true
                        numPacketsRx:
                          type: integer
                          nullable: true
                        numPacketsRxBad:
                          type: integer
                          nullable: true
                        numOnlineNodes:
                          type: integer
                          nullable: true
                        numTotalNodes:
                          type: integer
                          nullable: true
                        numRxDupe:
                          type: integer
                          nullable: true
                    time:
                      type: integer
                    raw:
                      type: string
                      nullable: true

    IncomingPacket:
      oneOf:
        - $ref: '#/components/schemas/TextMessagePacket'
        - $ref: '#/components/schemas/NodeInfoPacket'
        - $ref: '#/components/schemas/PositionPacket'
        - $ref: '#/components/schemas/DeviceTelemetryPacket'
        - $ref: '#/components/schemas/LocalStatsTelemetryPacket'

    Constellation:
      type: object
      description: A constellation is a group of nodes that are managed by a user or group of users.
      properties:
        id:
          type: integer
        name:
          type: string
          description: The name of the constellation
        description:
          type: string
          description: A description of the constellation
        created_by:
          type: integer
          description: The ID of the user that created the constellation
        members:
          type: array
          description: The users that are members of the constellation
          items:
            type: object
            properties:
              username:
                type: string
              role:
                type: string
                description: The role of the user in the constellation
                enum: [admin, editor, viewer]

    ObservedNode:
      type: object
      description: >
        A node that is observed by the system, usually inferred from ingested packets from the mesh network,
        but may also be manually added by a listener system.
      properties:
        internal_id:
          type: integer
          description: The internal ID of the observed node
        node_id:
          type: integer
          description: The ID of the node in the mesh network
        node_id_str:
          type: string
          description: The ID of the node in Meshastic !hex format
        mac_addr:
          type: string
          description: The MAC address of the node
        long_name:
          type: string
          description: The long name of the node
          nullable: true
        short_name:
          type: string
          description: The short name of the node
          nullable: true
        hw_model:
          type: string
          description: The hardware model of the node
          nullable: true
        sw_version:
          type: string
          description: The software version of the node
          nullable: true
        public_key:
          type: string
          description: The public key of the node
          nullable: true

    NodeAPIKey:
      type: object
      description: >
        An API key used by a node (or a node's bot process) to authenticate with the API. These are always
        scoped to one constellation and one user, but may be used by multiple nodes.
      properties:
        id:
          type: integer
          description: The ID of the API key
          readOnly: true
        key:
          type: string
          description: The API key secret value
          readOnly: true
        name:
          type: string
          description: The name of the API key
        constellation:
          type: integer
          description: The ID of the constellation that the API key is scoped to
          readOnly: true
        created_at:
          type: string
          readOnly: true
          format: date-time
          description: The date and time the API key was created
        owner:
          type: integer
          readOnly: true
          description: The ID of the user that owns the API key
        last_used:
          type: string
          format: date-time
          nullable: true
          readOnly: true
        is_active:
          type: boolean
          description: Whether the API key is active
        nodes:
          type: array
          description: The nodes that are associated with the API key
          readOnly: true
          items:
            type: integer

    ObservedNodeUpdate:
      type: object
      description: >
        Used to update an observed node directly. Normally observed nodes are updated automatically via the ingest endpoint,
        but this endpoint can be used to update node information directly (e.g. via the on_node_updated event)
      properties:
        id:
          type: integer
          description: The integer ID of the observed node
        macaddr:
          type: string
          description: The MAC address of the node
        hw_model:
          type: string
          nullable: true
          description: The hardware model of the node
        public_key:
          type: string
          nullable: true
          description: The public key of the node
        user:
          type: object
          properties:
            long_name:
              type: string
              nullable: true
              description: The long name of the node
            short_name:
              type: string
              nullable: true
              description: The short name of the node
        position:
          type: object
          nullable: true
          description: An optional position for the node, if known
          properties:
            logged_time:
              type: string
              format: date-time
              readOnly: true
              description: The time the position was logged with the API (set by the server)
            reported_time:
              type: string
              format: date-time
              description: The time the position was reported by the node
            latitude:
              type: number
              description: The latitude of the node
            longitude:
              type: number
              description: The longitude of the node
            altitude:
              type: number
              description: The altitude of the node
            location_source:
              type: string
              description: The source of the location data
              enum: [INTERNAL, EXTERNAL, MANUAL, UNKNOWN]
        device_metrics:
          type: object
          nullable: true
          description: The most recent device metrics from the node, if available
          properties:
            logged_time:
              type: string
              format: date-time
              readOnly: true
              description: The time the device metrics were logged with the API (set by the server)
            reported_time:
              type: string
              format: date-time
              description: The time the device metrics were reported by the node
            battery_level:
              type: number
              description: The battery level of the node
            voltage:
              type: number
              description: The voltage of the node
            channel_utilization:
              type: number
              description: The channel utilization as observed by the node
            air_util_tx:
              type: number
              description: The air time utilization of the node
            uptime_seconds:
              type: integer
              description: The uptime of the node in seconds

    ManagedNode:
      type: object
      description: >
        A node that is owned and managed by a user. This model represents the administrative functions
        which the user can perform on the node, such as adding/removing API keys.
        Managed nodes submit data to the API (or a bot process does), and a managed node often has an
        associated ObservedNode.
      properties:
        internal_id:
          type: string
          format: uuid
          description: Primary key UUID
        node_id:
          type: integer
          format: int64
          description: Node ID
        owner:
          type: integer
          description: ID of the user who owns this node
        constellation:
          type: integer
          description: ID of the constellation this node belongs to
        name:
          type: string
          maxLength: 100
          description: Name of the node
        node_id_str:
          type: string
          description: Node ID in hex format
          readOnly: true

paths:
  /status:
    get:
      summary: Get API status
      tags: [Authentication]
      responses:
        '200':
          description: API is operational
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    enum: [ok]

  /token:
    post:
      summary: Obtain JWT token
      tags: [Authentication]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                password:
                  type: string
      responses:
        '200':
          description: Token obtained successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  access:
                    type: string
                  refresh:
                    type: string

  /token/refresh:
    post:
      summary: Refresh JWT token
      tags: [Authentication]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                refresh:
                  type: string
      responses:
        '200':
          description: Token refreshed successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  access:
                    type: string

  /token/verify:
    post:
      summary: Verify JWT token
      tags: [Authentication]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                token:
                  type: string
      responses:
        '200':
          description: Token is valid
        '401':
          description: Token is invalid

  /packets/ingest:
    post:
      summary: Ingest a packet
      description: >
        Node bots should send incoming packets to this endpoint. The endpoint will automatically
        identify the packet type and process it accordingly.
      tags: [Packets]
      security:
        - ApiKeyAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/IncomingPacket'
      responses:
        '201':
          description: Packet ingested successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Success'
        '400':
          description: Invalid packet data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /packets/nodes:
    post:
      summary: Upsert node information
      description: >
        Node bots should send node information updates to this endpoint. The endpoint will automatically
        match the node information to an existing node, or create a new node if it doesn't exist.

        This endpoint is similar to the /nodes/observed-nodes endpoint, but is specifically used by
        node bots, and is authenticated with a Node API Key.
      tags: [Packets]
      security:
        - ApiKeyAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ObservedNodeUpdate'
      responses:
        '200':
          description: Node information updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ObservedNode'

  /constellations:
    get:
      summary: List constellations
      tags: [Constellations]
      security:
        - BearerAuth: []
      responses:
        '200':
          description: List of constellations
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Constellation'

    post:
      summary: Create a new constellation
      tags: [Constellations]
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                description:
                  type: string
      responses:
        '201':
          description: Constellation created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Constellation'

  /constellations/{id}:
    get:
      summary: Get constellation details
      tags: [Constellations]
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Constellation details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Constellation'

    put:
      summary: Update constellation
      tags: [Constellations]
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                description:
                  type: string
      responses:
        '200':
          description: Constellation updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Constellation'

    delete:
      summary: Delete constellation
      tags: [Constellations]
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '204':
          description: Constellation deleted successfully

  /constellations/{id}/members:
    post:
      summary: Add member to constellation
      tags: [Constellations]
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                user_id:
                  type: integer
                role:
                  type: string
                  enum: [admin, editor, viewer]
      responses:
        '200':
          description: Member added successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Constellation'
      
  /constellations/{id}/members/{user_id}:
    put:
      summary: Update member role
      tags: [Constellations]
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
        - name: user_id
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:  
          application/json:
            schema:
              type: object
              properties:
                role:
                  type: string
                  enum: [admin, editor, viewer]
      responses:
        '200':
          description: Member role updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Constellation'

    delete:
      summary: Remove member from constellation
      tags: [Constellations]
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
        - name: user_id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '204':
          description: Member removed successfully

  /nodes/observed-nodes:
    get:
      summary: List observed nodes
      tags: [Nodes]
      security:
        - BearerAuth: []
      responses:
        '200':
          description: List of observed nodes
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ObservedNode'

    post:
      summary: Create observed node
      tags: [Nodes]
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ObservedNode'
      responses:
        '201':
          description: Node created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ObservedNode'

  /nodes/observed-nodes/{node_id}:
    get:
      summary: Get observed node details
      tags: [Nodes]
      security:
        - BearerAuth: []
      parameters:
        - name: node_id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Node details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ObservedNode'

    put:
      summary: Update observed node
      tags: [Nodes]
      security:
        - BearerAuth: []
      parameters:
        - name: node_id
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
              schema:
                $ref: '#/components/schemas/ObservedNode'
      responses:
        '200':
          description: Node updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ObservedNode'

    delete:
      summary: Delete observed node
      tags: [Nodes]
      security:
        - BearerAuth: []
      parameters:
        - name: node_id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '204':
          description: Node deleted successfully


  /nodes/managed-nodes:
    get:
      summary: List managed nodes
      tags: [Nodes]
      security:
        - BearerAuth: []
      responses:
        '200':
          description: List of managed nodes
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ManagedNode'

    post:
      summary: Create managed node
      tags: [Nodes]
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                node_id:
                  type: integer
                name:
                  type: string
                constellation:
                  type: integer
      responses:
        '201':
          description: Node created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ManagedNode'

  /nodes/managed-nodes/{node_id}:
    get:
      summary: Get managed node details
      tags: [Nodes]
      security:
        - BearerAuth: []
      parameters:
        - name: node_id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Node details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ManagedNode'

    put:
      summary: Update managed node
      tags: [Nodes]
      security:
        - BearerAuth: []
      parameters:
        - name: node_id
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
              schema:
                type: object
                properties:
                  name:
                    type: string
                  constellation:
                    type: integer
      responses:
        '200':
          description: Node updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ManagedNode'

    delete:
      summary: Delete managed node
      tags: [Nodes]
      security:
        - BearerAuth: []
      parameters:
        - name: node_id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '204':
          description: Node deleted successfully

  /nodes/api-keys:
    get:
      summary: List API keys
      tags: [Nodes]
      security:
        - BearerAuth: []
      responses:
        '200':
          description: List of API keys
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/NodeAPIKey'

    post:
      summary: Create API key
      tags: [Nodes]
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                constellation:
                  type: integer
                nodes:
                  type: array
                  items:
                    type: integer
      responses:
        '201':
          description: API key created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NodeAPIKey'

  /nodes/api-keys/{id}:
    get:
      summary: Get API key details
      tags: [Nodes]
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: API key details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NodeAPIKey'

    put:
      summary: Update API key
      tags: [Nodes]
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                is_active:
                  type: boolean
      responses:
        '200':
          description: API key updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NodeAPIKey'

    delete:
      summary: Delete API key
      tags: [Nodes]
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '204':
          description: API key deleted successfully

  /nodes/api-keys/{id}/add_node:
    post:
      summary: Add node to API key
      tags: [Nodes]
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                node_id:
                  type: integer
      responses:
        '200':
          description: Node added successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NodeAPIKey'

  /nodes/api-keys/{id}/remove_node:
    post:
      summary: Remove node from API key
      tags: [Nodes]
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                node_id:
                  type: integer
      responses:
        '200':
          description: Node removed successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NodeAPIKey'
