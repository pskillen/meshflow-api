openapi: 3.1.0

info:
  title: Meshflow API
  version: 1.0.0
  description: API for managing Meshtastic networks and nodes

servers:
  - url: /api
    description: API base URL

tags:
  - name: Authentication
    description: JWT token management endpoints
  - name: Packets
    description: Packet ingestion and node information endpoints
  - name: Constellations
    description: Constellation management endpoints
  - name: Nodes
    description: Node and API key management endpoints
  - name: Text Messages
    description: Send and retrieve text messages between nodes

components:
  parameters:
    PaginationPage:
      name: page
      in: query
      required: false
      schema:
        type: integer
        default: 1
        minimum: 1
        description: Page number for pagination
    PaginationPageSize:
      name: page_size
      in: query
      required: false
      schema:
        type: integer
        default: 100
        minimum: 1
        maximum: 1000
        description: Number of items per page

  securitySchemes:
    BearerAuth:
      description: >
        A JWT token used by a user to authenticate with the API. The token is issued by the /token endpoint.
      type: http
      scheme: bearer
      bearerFormat: JWT
    NodeApiKeyAuth:
      description: >
        An API key used by a node (or a node's bot process) to authenticate with the API. These are always
        scoped to one constellation and one user, but may be used by multiple nodes .
      type: apiKey
      in: header
      name: X-API-Key

  schemas:
    Error:
      type: object
      properties:
        status:
          type: string
          enum: [error]
        message:
          type: string

    Success:
      type: object
      properties:
        status:
          type: string
          enum: [success]
        message:
          type: string

    BaseIncomingPacket:
      type: object
      description: >
        A packet received from the mesh network. This is the base class for all packet types, and contains
        common fields that are present in all packets.
      properties:
        id:
          type: integer
          description: The packet ID as generated by the packet sender
        from:
          type: integer
          description: The ID of the node that sent the packet
        fromId:
          type: string
          description: The ID of the node that sent the packet, in Meshastic !hex format
        to:
          type: integer
          description: The ID of the node that was the intended recipient of the packet
          nullable: true
        toId:
          type: string
          nullable: true
          description: The ID of the node that was the intended recipient of the packet, in Meshastic !hex format
        channel:
          type: integer
          nullable: true
          description: The channel number on which the packet was received
        rxTime:
          type: integer
          description: The time the packet was received, as a Unix timestamp
        rxSnr:
          type: number
          nullable: true
          description: The signal-to-noise ratio of the packet
        hopLimit:
          type: integer
          nullable: true
          description: The number of hops the packet had remaining when it was received
        rxRssi:
          type: number
          nullable: true
          description: The received signal strength of the packet
        hopStart:
          type: integer
          nullable: true
          description: The initial number of hops the packet had when it was sent
        relayNode:
          type: integer
          nullable: true
          description: The ID of the node that relayed the packet
        pkiEncrypted:
          type: boolean
          nullable: true
          description: Whether the packet was encrypted using the node's public key
        nextHop:
          type: integer
          nullable: true
          description: The ID of the next hop node
        priority:
          type: string
          nullable: true
          description: The priority of the packet
        raw:
          type: string
          nullable: true
          description: The raw packet data

    TextMessagePacket:
      allOf:
        - $ref: '#/components/schemas/BaseIncomingPacket'
        - type: object
          properties:
            decoded:
              type: object
              properties:
                portnum:
                  type: string
                  enum: [TEXT_MESSAGE_APP]
                payload:
                  type: string
                bitfield:
                  type: integer
                  nullable: true
                text:
                  type: string
                  nullable: true
                  description: The text of the message
                replyId:
                  type: integer
                  nullable: true
                  description: The ID of the message being replied to
                emoji:
                  type: integer
                  nullable: true
                  description: If '1', the message is an emoji reply

    NodeInfoPacket:
      allOf:
        - $ref: '#/components/schemas/BaseIncomingPacket'
        - type: object
          properties:
            decoded:
              type: object
              properties:
                portnum:
                  type: string
                  enum: [NODEINFO_APP]
                payload:
                  type: string
                bitfield:
                  type: integer
                  nullable: true
                user:
                  type: object
                  properties:
                    id:
                      type: string
                      description: The ID of the node in Meshastic !hex format
                    shortName:
                      type: string
                      nullable: true
                      description: The short name of the node
                    longName:
                      type: string
                      nullable: true
                      description: The long name of the node
                    hwModel:
                      type: string
                      nullable: true
                      description: The hardware model of the node
                    swVersion:
                      type: string
                      nullable: true
                      description: The software version of the node
                    publicKey:
                      type: string
                      nullable: true
                      description: The public key of the node
                    macaddr:
                      type: string
                      nullable: true
                      description: The MAC address of the node
                    role:
                      type: string
                      nullable: true
                      description: The Meshastic role of the node (e.g. CLIENT, ROUTER)
                      enum: [CLIENT, CLIENT_MUTE, CLIENT_HIDDEN, ROUTER, ROUTER_CLIENT, ROUTER_LATE, REPEATER, TRACKER, SENSOR, SIMULATOR]
                    raw:
                      type: string
                      nullable: true

    PositionPacket:
      allOf:
        - $ref: '#/components/schemas/BaseIncomingPacket'
        - type: object
          properties:
            decoded:
              type: object
              properties:
                portnum:
                  type: string
                  enum: [POSITION_APP]
                payload:
                  type: string
                bitfield:
                  type: integer
                  nullable: true
                position:
                  type: object
                  properties:
                    latitude:
                      type: number
                      nullable: true
                    latitudeI:
                      type: integer
                      nullable: true
                    longitude:
                      type: number
                      nullable: true
                    longitudeI:
                      type: integer
                      nullable: true
                    altitude:
                      type: number
                      nullable: true
                    heading:
                      type: number
                      nullable: true
                    locationSource:
                      type: string
                      nullable: true
                      enum: [INTERNAL, EXTERNAL, MANUAL, UNKNOWN]
                    precisionBits:
                      type: integer
                      nullable: true
                    time:
                      type: integer
                      nullable: true
                    groundSpeed:
                      type: number
                      nullable: true
                    groundTrack:
                      type: number
                      nullable: true
                    raw:
                      type: string
                      nullable: true

    DeviceTelemetryPacket:
      allOf:
        - $ref: '#/components/schemas/BaseIncomingPacket'
        - type: object
          properties:
            decoded:
              type: object
              properties:
                portnum:
                  type: string
                  enum: [TELEMETRY_APP]
                payload:
                  type: string
                bitfield:
                  type: integer
                  nullable: true
                telemetry:
                  type: object
                  properties:
                    deviceMetrics:
                      type: object
                      properties:
                        batteryLevel:
                          type: number
                          nullable: true
                        voltage:
                          type: number
                          nullable: true
                        channelUtilization:
                          type: number
                          nullable: true
                        airUtilTx:
                          type: number
                          nullable: true
                        uptimeSeconds:
                          type: integer
                          nullable: true
                    time:
                      type: integer
                    raw:
                      type: string
                      nullable: true

    LocalStatsTelemetryPacket:
      allOf:
        - $ref: '#/components/schemas/BaseIncomingPacket'
        - type: object
          properties:
            decoded:
              type: object
              properties:
                portnum:
                  type: string
                  enum: [TELEMETRY_APP]
                payload:
                  type: string
                bitfield:
                  type: integer
                  nullable: true
                telemetry:
                  type: object
                  properties:
                    localStats:
                      type: object
                      properties:
                        uptimeSeconds:
                          type: integer
                          nullable: true
                        channelUtilization:
                          type: number
                          nullable: true
                        airUtilTx:
                          type: number
                          nullable: true
                        numPacketsTx:
                          type: integer
                          nullable: true
                        numPacketsRx:
                          type: integer
                          nullable: true
                        numPacketsRxBad:
                          type: integer
                          nullable: true
                        numOnlineNodes:
                          type: integer
                          nullable: true
                        numTotalNodes:
                          type: integer
                          nullable: true
                        numRxDupe:
                          type: integer
                          nullable: true
                    time:
                      type: integer
                    raw:
                      type: string
                      nullable: true

    IncomingPacket:
      oneOf:
        - $ref: '#/components/schemas/TextMessagePacket'
        - $ref: '#/components/schemas/NodeInfoPacket'
        - $ref: '#/components/schemas/PositionPacket'
        - $ref: '#/components/schemas/DeviceTelemetryPacket'
        - $ref: '#/components/schemas/LocalStatsTelemetryPacket'

    Constellation:
      type: object
      description: A constellation is a group of nodes that are managed by a user or group of users.
      properties:
        id:
          type: integer
        name:
          type: string
          description: The name of the constellation
        description:
          type: string
          description: A description of the constellation
        created_by:
          type: integer
          description: The ID of the user that created the constellation
        channels:
          type: array
          description: The channels that are part of the constellation
          items:
            $ref: '#/components/schemas/MessageChannel'


    ObservedNode:
      type: object
      description: >
        A node that is observed by the system, usually inferred from ingested packets from the mesh network,
        but may also be manually added by a listener system.
      properties:
        internal_id:
          type: integer
          description: The internal ID of the observed node
        node_id:
          type: integer
          description: The ID of the node in the mesh network
        node_id_str:
          type: string
          description: The ID of the node in Meshastic !hex format
        mac_addr:
          type: string
          description: The MAC address of the node
        long_name:
          type: string
          description: The long name of the node
          nullable: true
        short_name:
          type: string
          description: The short name of the node
          nullable: true
        hw_model:
          type: string
          description: The hardware model of the node
          nullable: true
        sw_version:
          type: string
          description: The software version of the node
          nullable: true
        public_key:
          type: string
          description: The public key of the node
          nullable: true
        last_heard:
          type: string
          format: date-time
          description: The timestamp when the node was last heard from
          nullable: true
        latest_position:
          $ref: '#/components/schemas/Position'
        latest_device_metrics:
          $ref: '#/components/schemas/DeviceMetrics'
        owner:
          type: object
          description: The owner of the node (if the node has been claimed by a user in the system)
          properties:
            id:
              type: integer
              description: The ID of the owner
              readOnly: true
            username:
              type: string
              description: The username of the owner
              readOnly: true

    ObservedNodeSearch:
      type: object
      description: >
        A subset of ObservedNode fields returned by the search endpoint.
      properties:
        node_id:
          type: integer
          description: The ID of the node in the mesh network
        node_id_str:
          type: string
          description: The ID of the node in Meshastic !hex format
        long_name:
          type: string
          description: The long name of the node
          nullable: true
        short_name:
          type: string
          description: The short name of the node
          nullable: true
        last_heard:
          type: string
          format: date-time
          description: The timestamp when the node was last heard from
          nullable: true
        owner:
          type: object
          description: The owner of the node (if the node has been claimed by a user in the system)
          properties:
            id:
              type: integer
              description: The ID of the owner
              readOnly: true
            username:
              type: string
              description: The username of the owner
              readOnly: true

    NodeAPIKey:
      type: object
      description: >
        An API key used by a node (or a node's bot process) to authenticate with the API. These are always
        scoped to one constellation and one user, but may be used by multiple nodes.
      properties:
        id:
          type: integer
          description: The ID of the API key
          readOnly: true
        key:
          type: string
          description: The API key secret value
          readOnly: true
        name:
          type: string
          description: The name of the API key
        constellation:
          type: integer
          description: The ID of the constellation that the API key is scoped to
          readOnly: true
        created_at:
          type: string
          readOnly: true
          format: date-time
          description: The date and time the API key was created
        owner:
          type: integer
          readOnly: true
          description: The ID of the user that owns the API key
        last_used:
          type: string
          format: date-time
          nullable: true
          readOnly: true
        is_active:
          type: boolean
          description: Whether the API key is active
        nodes:
          type: array
          description: The nodes that are associated with the API key
          readOnly: true
          items:
            type: integer

    NodeOwnerClaim:
      type: object
      description: >
        Represents a user's claim to an observed node. A claim must be accepted (by the node sending the claim_key) to be valid.
      properties:
        node:
          type: integer
          description: The ID of the observed node being claimed
          readOnly: true
        user:
          type: integer
          description: The ID of the user making the claim
          readOnly: true
        claim_key:
          type: string
          description: The claim key that must be sent by the node to accept the claim
          readOnly: true
        created_at:
          type: string
          format: date-time
          description: The date and time the claim was created
          readOnly: true
        accepted_at:
          type: string
          format: date-time
          description: The date and time the claim was accepted (nullable)
          nullable: true
          readOnly: true

    ObservedNodeUpdate:
      type: object
      description: >
        Used to update an observed node directly. Normally observed nodes are updated automatically via the ingest endpoint,
        but this endpoint can be used to update node information directly (e.g. via the on_node_updated event)
      properties:
        id:
          type: integer
          description: The integer ID of the observed node
        macaddr:
          type: string
          description: The MAC address of the node
        hw_model:
          type: string
          nullable: true
          description: The hardware model of the node
        public_key:
          type: string
          nullable: true
          description: The public key of the node
        last_heard:
          type: string
          format: date-time
          description: The timestamp when the node was last heard from
          nullable: true
        user:
          type: object
          properties:
            long_name:
              type: string
              nullable: true
              description: The long name of the node
            short_name:
              type: string
              nullable: true
              description: The short name of the node
        position:
          $ref: '#/components/schemas/Position'
        device_metrics:
          $ref: '#/components/schemas/DeviceMetrics'

    ManagedNodeRead:
      type: object
      description: >
        A node that is owned and managed by a user. This model represents the administrative functions
        which the user can perform on the node, such as adding/removing API keys.
        Managed nodes submit data to the API (or a bot process does), and a managed node often has an
        associated ObservedNode.
      properties:
        node_id:
          type: integer
          format: int64
          description: Node ID
        long_name:
          type: string
          description: The long name of the node
          readOnly: true
        short_name:
          type: string
          description: The short name of the node
          readOnly: true
        last_heard:
          type: string
          format: date-time
          description: The timestamp when the node was last heard from
          readOnly: true
        node_id_str:
          type: string
          description: Node ID in hex format
          readOnly: true
        owner:
          type: object
          description: The owner of the node
          readOnly: true
          properties:
            id:
              type: integer
              description: The ID of the owner
              readOnly: true
            username:
              type: string
              description: The username of the owner
              readOnly: true
        constellation:
          type: object
          description: The constellation this node belongs to
          readOnly: true
          properties:
            id:
              type: integer
              description: The ID of the constellation
            name:
              type: string
              description: The name of the constellation
            map_color:
              type: string
              description: The color used for the constellation on maps
        position:
          type: object
          description: The latest known position of the node
          readOnly: true
          properties:
            latitude:
              type: number
              description: The latitude of the node
            longitude:
              type: number
              description: The longitude of the node

    PaginatedResponse:
      type: object
      description: Standard Django REST Framework paginated response
      properties:
        count:
          type: integer
          description: Total number of items across all pages
        next:
          type: string
          nullable: true
          description: URL to the next page of results, if available
        previous:
          type: string
          nullable: true
          description: URL to the previous page of results, if available
        results:
          type: array
          description: Array of items for the current page

    Position:
      type: object
      description: A position record for a node
      properties:
        id:
          type: integer
          description: The ID of the position record
        node:
          type: integer
          description: The ID of the node this position belongs to
        logged_time:
          type: string
          format: date-time
          description: The time the position was logged with the API
        reported_time:
          type: string
          format: date-time
          description: The time the position was reported by the node
        latitude:
          type: number
          description: The latitude of the node
        longitude:
          type: number
          description: The longitude of the node
        altitude:
          type: number
          description: The altitude of the node
          nullable: true
        heading:
          type: number
          description: The heading of the node
          nullable: true
        location_source:
          type: string
          description: The source of the location data
          enum: [INTERNAL, EXTERNAL, MANUAL, UNKNOWN]
        precision_bits:
          type: integer
          description: The precision of the location data in bits
          nullable: true
        ground_speed:
          type: number
          description: The ground speed of the node in m/s
          nullable: true
        ground_track:
          type: number
          description: The ground track of the node in degrees
          nullable: true
        sats_in_view:
          type: integer
          description: The number of satellites in view
          nullable: true
        pdop:
          type: number
          description: The position dilution of precision
          nullable: true

    DeviceMetrics:
      type: object
      description: Device metrics for a node
      properties:
        id:
          type: integer
          description: The ID of the device metrics record
        node:
          type: integer
          description: The ID of the node these metrics belong to
        logged_time:
          type: string
          format: date-time
          description: The time the metrics were logged with the API
        reported_time:
          type: string
          format: date-time
          description: The time the metrics were reported by the node
        battery_level:
          type: number
          description: The battery level as a percentage
        voltage:
          type: number
          description: The battery voltage in volts
        channel_utilization:
          type: number
          description: The channel utilization as a percentage
        air_util_tx:
          type: number
          description: The air utilization for transmission
        uptime_seconds:
          type: integer
          description: The device uptime in seconds

    DateRangeQuery:
      type: object
      description: Query parameters for date range filtering
      properties:
        start_date:
          type: string
          format: date
          description: Filter after this date (format YYYY-MM-DD)
        end_date:
          type: string
          format: date
          description: Filter before this date (format YYYY-MM-DD)

    PacketStats:
      type: object
      description: Packet statistics for a node
      properties:
        start_date:
          type: string
          format: date
          description: The start date of the stats
        end_date:
          type: string
          format: date
          description: The end date of the stats
        intervals:
          type: array
          description: The intervals of the stats
          items:
            $ref: '#/components/schemas/PacketStatsInterval'

    PacketStatsInterval:
      type: object
      description: Packet statistics for a node
      properties:
        start_date:
          type: string
          format: date
          description: The start date of the stats
        end_date:
          type: string
          format: date
          description: The end date of the stats
        packet_types:
          type: array
          description: The types of packets sent
          items:
            type: object
            properties:
              packet_type:
                type: string
                description: The type of packet
              count:
                type: integer
                description: The number of unique packets captured

    GlobalStats:
      type: object
      description: Global packet statistics across all nodes
      properties:
        start_date:
          type: string
          format: date
          description: The start date of the stats
        end_date:
          type: string
          format: date
          description: The end date of the stats
        intervals:
          type: array
          description: The intervals of the stats
          items:
            $ref: '#/components/schemas/GlobalStatsInterval'
        summary:
          type: object
          properties:
            total_packets:
              type: integer
              description: Total number of packets across all intervals
            time_range:
              type: object
              properties:
                start:
                  type: string
                  format: date-time
                  description: Start of the time range
                end:
                  type: string
                  format: date-time
                  description: End of the time range

    GlobalStatsInterval:
      type: object
      description: Global packet statistics for a time interval
      properties:
        start_date:
          type: string
          format: date
          description: The start date of the interval
        end_date:
          type: string
          format: date
          description: The end date of the interval
        packets:
          type: integer
          description: Number of packets in this interval

    TextMessage:
      type: object
      description: A text message sent to a node
      properties:
        id:
          description: The internal ID of the text message
          type: string
          readOnly: true
          format: uuid
        packet_id:
          description: The packet ID of the text message
          type: integer
          readOnly: true
        sender:
          type: object
          description: The sender node info
          properties:
            node_id_str:
              type: string
              description: The ID of the node in Meshastic !hex format
            long_name:
              type: string
              description: The long name of the node
              nullable: true
            short_name:
              type: string
              description: The short name of the node
              nullable: true
        recipient_node_id:
          type: integer
          nullable: true
          description: The node ID of the recipient (null for broadcast)
          readOnly: true
        channel:
          type: integer
          description: The MessageChannel ID (not the node's channel index)
          readOnly: true
        sent_at:
          type: string
          format: date-time
          readOnly: true
        message_text:
          type: string
          readOnly: true
        is_emoji:
          type: boolean
          readOnly: true
        reply_to_message_id:
          type: integer 
          nullable: true
          description: The packet_id of the message being replied to
          readOnly: true

    MessageChannel:
      type: object
      description: A message channel within a constellation.
      properties:
        id:
          type: integer
        name:
          type: string
        constellation:
          type: integer
          description: The ID of the constellation this channel belongs to

    ConstellationMember:
      type: object
      description: A member of a constellation.
      properties:
        user_id:
          type: integer
        username:
          type: string
        role:
          type: string
          enum: [admin, editor, viewer]


paths:
  /status/:
    get:
      summary: Get API status
      tags: [Authentication]
      responses:
        '200':
          description: API is operational
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    enum: [ok]

  /token/:
    post:
      summary: Obtain JWT token
      tags: [Authentication]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                password:
                  type: string
      responses:
        '200':
          description: Token obtained successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  access:
                    type: string
                  refresh:
                    type: string

  /token/refresh/:
    post:
      summary: Refresh JWT token
      tags: [Authentication]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                refresh:
                  type: string
      responses:
        '200':
          description: Token refreshed successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  access:
                    type: string

  /token/verify/:
    post:
      summary: Verify JWT token
      tags: [Authentication]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                token:
                  type: string
      responses:
        '200':
          description: Token is valid
        '401':
          description: Token is invalid

  # dj-rest-auth endpoints (core, no registration)
  /auth/login/:
    post:
      summary: Log in and obtain user JWT
      tags: [Authentication]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                password:
                  type: string
      responses:
        '200':
          description: Login successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  access:
                    type: string
                  refresh:
                    type: string

  /auth/logout/:
    post:
      summary: Log out user (JWT blacklisted)
      tags: [Authentication]
      security:
        - BearerAuth: []
      responses:
        '200':
          description: Logout successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Success'

  /auth/password/reset/:
    post:
      summary: Request password reset email
      tags: [Authentication]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
      responses:
        '200':
          description: Password reset email sent
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Success'

  /auth/password/reset/confirm/:
    post:
      summary: Confirm password reset
      tags: [Authentication]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                uid:
                  type: string
                token:
                  type: string
                new_password1:
                  type: string
                new_password2:
                  type: string
      responses:
        '200':
          description: Password reset successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Success'

  /auth/user/:
    get:
      summary: Get current user details
      tags: [Authentication]
      security:
        - BearerAuth: []
      responses:
        '200':
          description: User details
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: integer
                  username:
                    type: string
                  email:
                    type: string
                  display_name:
                    type: string
    put:
      summary: Update current user details
      tags: [Authentication]
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                display_name:
                  type: string
      responses:
        '200':
          description: User updated
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: integer
                  username:
                    type: string
                  email:
                    type: string
                  display_name:
                    type: string
    patch:
      summary: Partially update current user details
      tags: [Authentication]
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                display_name:
                  type: string
      responses:
        '200':
          description: User updated
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: integer
                  username:
                    type: string
                  email:
                    type: string
                  display_name:
                    type: string

  /auth/password/change/:
    post:
      summary: Change password for current user
      tags: [Authentication]
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                new_password1:
                  type: string
                new_password2:
                  type: string
      responses:
        '200':
          description: Password changed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Success'

  # Social auth endpoints
  /auth/social/google/:
    get:
      summary: Get Google OAuth2 login URL
      tags: [Authentication]
      responses:
        '200':
          description: Google OAuth2 login URL
          content:
            application/json:
              schema:
                type: object
                properties:
                  authorization_url:
                    type: string

  /auth/social/google/callback/:
    get:
      summary: Google OAuth2 callback
      tags: [Authentication]
      parameters:
        - name: code
          in: query
          required: true
          schema:
            type: string
        - name: state
          in: query
          required: false
          schema:
            type: string
      responses:
        '302':
          description: Redirect to frontend with JWT

  /auth/social/google/token/:
    post:
      summary: Exchange Google OAuth2 code for JWT
      tags: [Authentication]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                code:
                  type: string
                state:
                  type: string
      responses:
        '200':
          description: JWT token returned
          content:
            application/json:
              schema:
                type: object
                properties:
                  access:
                    type: string
                  refresh:
                    type: string

  /auth/social/github/:
    get:
      summary: Get Github OAuth2 login URL
      tags: [Authentication]
      responses:
        '200':
          description: Github OAuth2 login URL
          content:
            application/json:
              schema:
                type: object
                properties:
                  authorization_url:
                    type: string

  /auth/social/github/callback/:
    get:
      summary: Github OAuth2 callback
      tags: [Authentication]
      parameters:
        - name: code
          in: query
          required: true
          schema:
            type: string
        - name: state
          in: query
          required: false
          schema:
            type: string
      responses:
        '302':
          description: Redirect to frontend with JWT

  /auth/social/github/token/:
    post:
      summary: Exchange Github OAuth2 code for JWT
      tags: [Authentication]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                code:
                  type: string
                state:
                  type: string
      responses:
        '200':
          description: JWT token returned
          content:
            application/json:
              schema:
                type: object
                properties:
                  access:
                    type: string
                  refresh:
                    type: string

  /packets/ingest:
    post:
      summary: Ingest a packet
      description: >
        Node bots should send incoming packets to this endpoint. The endpoint will automatically
        identify the packet type and process it accordingly.
      tags: [Packets]
      security:
        - ApiKeyAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/IncomingPacket'
      responses:
        '201':
          description: Packet ingested successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Success'
        '400':
          description: Invalid packet data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /packets/nodes:
    post:
      summary: Upsert node information
      description: >
        Node bots should send node information updates to this endpoint. The endpoint will automatically
        match the node information to an existing node, or create a new node if it doesn't exist.

        This endpoint is similar to the /nodes/observed-nodes endpoint, but is specifically used by
        node bots, and is authenticated with a Node API Key.
      tags: [Packets]
      security:
        - ApiKeyAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ObservedNodeUpdate'
      responses:
        '200':
          description: Node information updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ObservedNode'

  /constellations:
    get:
      summary: List constellations
      tags: [Constellations]
      security:
        - BearerAuth: []
      parameters:
        - $ref: '#/components/parameters/PaginationPage'
        - $ref: '#/components/parameters/PaginationPageSize'
      responses:
        '200':
          description: List of constellations
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/PaginatedResponse'
                  - type: object
                    properties:
                      results:
                        type: array
                        items:
                          $ref: '#/components/schemas/Constellation'

    post:
      summary: Create a new constellation
      tags: [Constellations]
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                description:
                  type: string
      responses:
        '201':
          description: Constellation created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Constellation'

  /constellations/{id}:
    get:
      summary: Get constellation details
      tags: [Constellations]
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Constellation details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Constellation'

    put:
      summary: Update constellation
      tags: [Constellations]
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                description:
                  type: string
                channels:
                  type: array
                  items:
                    $ref: '#/components/schemas/MessageChannel'
      responses:
        '200':
          description: Constellation updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Constellation'

    delete:
      summary: Delete constellation
      tags: [Constellations]
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '204':
          description: Constellation deleted successfully

  /constellations/{id}/members:
    get:
      summary: List members of a constellation
      tags: [Constellations]
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: List of members for the constellation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ConstellationMember'

    post:
      summary: Add member to constellation
      tags: [Constellations]
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                user_id:
                  type: integer
                role:
                  type: string
                  enum: [admin, editor, viewer]
      responses:
        '200':
          description: Member added successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Constellation'

  /constellations/{id}/members/{user_id}:
    put:
      summary: Update member role
      tags: [Constellations]
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
        - name: user_id
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                role:
                  type: string
                  enum: [admin, editor, viewer]
      responses:
        '200':
          description: Member role updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Constellation'

    delete:
      summary: Remove member from constellation
      tags: [Constellations]
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
        - name: user_id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '204':
          description: Member removed successfully

  /constellations/{id}/channels:
    get:
      summary: List message channels for a constellation
      tags: [Constellations]
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: List of message channels for the constellation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/MessageChannel'
    post:
      summary: Create a message channel for a constellation
      tags: [Constellations]
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
      responses:
        '201':
          description: Message channel created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageChannel'

  /nodes/observed-nodes:
    get:
      summary: List observed nodes
      tags: [Nodes]
      security:
        - BearerAuth: []
      parameters:
        - $ref: '#/components/parameters/PaginationPage'
        - $ref: '#/components/parameters/PaginationPageSize'
      responses:
        '200':
          description: List of observed nodes
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/PaginatedResponse'
                  - type: object
                    properties:
                      results:
                        type: array
                        items:
                          $ref: '#/components/schemas/ObservedNode'

    post:
      summary: Create observed node
      tags: [Nodes]
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ObservedNode'
      responses:
        '201':
          description: Node created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ObservedNode'

  /nodes/observed-nodes/search:
    get:
      summary: Search observed nodes
      description: Search for observed nodes by node_id_str, short_name, long_name, or node_id
      tags: [Nodes]
      security:
        - BearerAuth: []
      parameters:
        - name: q
          in: query
          required: true
          schema:
            type: string
            description: Search term to match against node_id_str, short_name, long_name, or node_id
      responses:
        '200':
          description: List of matching nodes
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ObservedNodeSearch'
        '400':
          description: Invalid request parameters
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /nodes/observed-nodes/{node_id}:
    get:
      summary: Get observed node details
      tags: [Nodes]
      security:
        - BearerAuth: []
      parameters:
        - name: node_id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Node details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ObservedNode'

    put:
      summary: Update observed node
      tags: [Nodes]
      security:
        - BearerAuth: []
      parameters:
        - name: node_id
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
              schema:
                $ref: '#/components/schemas/ObservedNode'
      responses:
        '200':
          description: Node updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ObservedNode'

    delete:
      summary: Delete observed node
      tags: [Nodes]
      security:
        - BearerAuth: []
      parameters:
        - name: node_id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '204':
          description: Node deleted successfully

  /nodes/observed-nodes/{node_id}/positions:
    get:
      summary: Get positions for a specific node
      description: Returns a list of positions for a specific node with optional date filtering
      tags: [Nodes]
      security:
        - BearerAuth: []
      parameters:
        - name: node_id
          in: path
          required: true
          schema:
            type: integer
        - $ref: '#/components/schemas/DateRangeQuery'
      responses:
        '200':
          description: List of positions for the node
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Position'
        '400':
          description: Invalid request parameters
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /nodes/observed-nodes/{node_id}/device-metrics:
    get:
      summary: Get device metrics for a specific node
      description: Returns a list of device metrics for a specific node with optional date filtering
      tags: [Nodes]
      security:
        - BearerAuth: []
      parameters:
        - name: node_id
          in: path
          required: true
          schema:
            type: integer
        - $ref: '#/components/schemas/DateRangeQuery'
      responses:
        '200':
          description: List of device metrics for the node
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/DeviceMetrics'
        '400':
          description: Invalid request parameters
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /nodes/managed-nodes:
    get:
      summary: List managed nodes
      tags: [Nodes]
      security:
        - BearerAuth: []
      parameters:
        - $ref: '#/components/parameters/PaginationPage'
        - $ref: '#/components/parameters/PaginationPageSize'
      responses:
        '200':
          description: List of managed nodes
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/PaginatedResponse'
                  - type: object
                    properties:
                      results:
                        type: array
                        items:
                          $ref: '#/components/schemas/ManagedNodeRead'

    post:
      summary: Create managed node
      tags: [Nodes]
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                node_id:
                  type: integer
                name:
                  type: string
                constellation:
                  type: integer
      responses:
        '201':
          description: Node created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ManagedNodeRead'

  /nodes/managed-nodes/{node_id}:
    get:
      summary: Get managed node details
      tags: [Nodes]
      security:
        - BearerAuth: []
      parameters:
        - name: node_id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Node details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ManagedNodeRead'

    put:
      summary: Update managed node
      tags: [Nodes]
      security:
        - BearerAuth: []
      parameters:
        - name: node_id
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
              schema:
                type: object
                properties:
                  name:
                    type: string
                  constellation:
                    type: integer
      responses:
        '200':
          description: Node updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ManagedNodeRead'

    delete:
      summary: Delete managed node
      tags: [Nodes]
      security:
        - BearerAuth: []
      parameters:
        - name: node_id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '204':
          description: Node deleted successfully

  /nodes/api-keys:
    get:
      summary: List API keys
      tags: [Nodes]
      security:
        - BearerAuth: []
      parameters:
        - $ref: '#/components/parameters/PaginationPage'
        - $ref: '#/components/parameters/PaginationPageSize'
      responses:
        '200':
          description: List of API keys
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/PaginatedResponse'
                  - type: object
                    properties:
                      results:
                        type: array
                        items:
                          $ref: '#/components/schemas/NodeAPIKey'

    post:
      summary: Create API key
      tags: [Nodes]
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                constellation:
                  type: integer
                nodes:
                  type: array
                  items:
                    type: integer
      responses:
        '201':
          description: API key created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NodeAPIKey'

  /nodes/api-keys/{id}:
    get:
      summary: Get API key details
      tags: [Nodes]
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: API key details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NodeAPIKey'

    put:
      summary: Update API key
      tags: [Nodes]
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                is_active:
                  type: boolean
      responses:
        '200':
          description: API key updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NodeAPIKey'

    delete:
      summary: Delete API key
      tags: [Nodes]
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '204':
          description: API key deleted successfully

  /nodes/api-keys/{id}/add_node:
    post:
      summary: Add node to API key
      tags: [Nodes]
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                node_id:
                  type: integer
      responses:
        '200':
          description: Node added successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NodeAPIKey'

  /nodes/api-keys/{id}/remove_node:
    post:
      summary: Remove node from API key
      tags: [Nodes]
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                node_id:
                  type: integer
      responses:
        '200':
          description: Node removed successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NodeAPIKey'

  /stats/nodes/{node_id}/packets:
    get:
      summary: Get packet stats for a specific node
      description: Returns the packet stats for a specific node with optional date filtering
      tags: [Nodes]
      security:
        - BearerAuth: []
      parameters:
        - name: node_id
          in: path
          required: true
          schema:
            type: integer
        - $ref: '#/components/schemas/DateRangeQuery'
        - name: interval
          in: query
          required: false
          schema:
            type: integer
            description: The interval of the stats
            default: 1
        - name: interval_type
          in: query
          required: false
          schema:
            type: string
            enum: [hour, day, week, month]
            default: hour
      responses:
        '200':
          description: List of stats for the node
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/PacketStats'
        '400':
          description: Invalid request parameters
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /stats/global:
    get:
      summary: Get global packet statistics
      description: Returns global packet statistics across all nodes for the specified time range
      tags: [Stats]
      security:
        - BearerAuth: []
      parameters:
        - $ref: '#/components/schemas/DateRangeQuery'
        - name: interval
          in: query
          required: false
          schema:
            type: integer
            description: The interval of the stats
            default: 1
        - name: interval_type
          in: query
          required: false
          schema:
            type: string
            enum: [hour, day, week, month]
            default: hour
      responses:
        '200':
          description: Global packet statistics
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GlobalStats'
        '400':
          description: Invalid request parameters
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /nodes/observed-nodes/{node_id}/claim:
    get:
      summary: Get claim for observed node
      description: Get the current user's claim for the specified observed node.
      tags: [Nodes]
      security:
        - BearerAuth: []
      parameters:
        - name: node_id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Claim found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NodeOwnerClaim'
        '404':
          description: No claim found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      summary: Create claim for observed node
      description: Create a claim for the current user for the specified observed node.
      tags: [Nodes]
      security:
        - BearerAuth: []
      parameters:
        - name: node_id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '201':
          description: Claim created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NodeOwnerClaim'
        '400':
          description: Claim already exists
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      summary: Delete claim for observed node
      description: Delete the current user's claim for the specified observed node.
      tags: [Nodes]
      security:
        - BearerAuth: []
      parameters:
        - name: node_id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '204':
          description: Claim deleted successfully
        '404':
          description: No claim found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /messages/text:
    get:
      summary: List text messages
      tags: [Text Messages]
      security:
        - BearerAuth: []
      parameters:
        - $ref: '#/components/parameters/PaginationPage'
        - $ref: '#/components/parameters/PaginationPageSize'
        - name: constellation_id
          in: query
          required: false
          schema:
            type: integer
          description: Filter messages by constellation ID (via channel's constellation)
        - name: channel_id
          in: query
          required: false
          schema:
            type: integer
          description: Filter messages by message channel ID
      responses:
        '200':
          description: List of text messages
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/PaginatedResponse'
                  - type: object
                    properties:
                      results:
                        type: array
                        items:
                          $ref: '#/components/schemas/TextMessage'

  /messages/text/{id}:
    get:
      summary: Get text message details
      tags: [Text Messages]
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Text message details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TextMessage'
    delete:
      summary: Delete text message
      tags: [Text Messages]
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '204':
          description: Text message deleted successfully
